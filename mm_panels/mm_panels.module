<?php
/**
 * @file
 *
 * Core functionality for the Monster Menus Panels bridge.
 */

/**
 * Implements hook_help().
 */
function mm_panels_help($path, $arg) {
  if ($path == 'admin/help#mm_panels') {
    $output = file_get_contents(drupal_get_path('module', 'mm_panels') . '/README.txt');
    return module_exists('markdown') ? filter_xss_admin(module_invoke('markdown', 'filter', 'process', 0, -1, $output)) : '<pre>' . check_plain($output) . '</pre>';
  }
  return;
}

/**
 * Implements hook_menu_alter().
 */
function mm_panels_menu_alter(&$items) {
  $items['panels/ajax']['access callback'] = '_mm_panels_content_perms';
  return;
}

/**
 * Provides a access callback for 'panels/ajax' menu router. 
 *
 * Only users who have the 'administer nodes' permission are allowed to add 
 * content other than existing nodes to a Panel Pane.  
 *
 * The $access_content permission is also checked to ensure a user has 
 * appropriate access permssions.
 *
 * @param $access_content
 *   Permission to check to ensure a user has proper permissions access 
 *   permissions.
 */
function _mm_panels_content_perms($access_content) {

  if (user_access('administer nodes')) { 
    return TRUE;
  }
  
  $path = explode('/', $_GET['q']);
  // If adding content to a panel pane
  if (!empty($path[3]) && trim(drupal_strtolower($path[3])) == 'select-content') {
    // By default a user can only add existing nodes to a Panel Pane.
    // A user with the "Administer Nodes" permission can add all available
    // content (e.g. Views, Blocks, etc.).
    // TODO: Make Admin page for these settings similar to 
    //'admin/structure/panels/settings/panel-node'.
    if (!empty($path[6]) && trim(drupal_strtolower($path[6])) == 'node') {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  
  return user_access($access_content);
}

/**
 * Implements hook_preprocess_page().
 */
function mm_panels_preprocess_page(&$var) {

  $mm_flag_create_panel = FALSE;
  $mm_flags = array();
  $mmtids = array();
  $oarg_list = array();
  $this_mmtid = 0;

  $prefix = mm_parse_args($mmtids, $oarg_list, $this_mmtid);

  // We need to make sure the current page isn't a settings page or something 
  // similar and that the page prefix is mm/.
  if ($prefix == 'mm' && empty($oarg_list) && !empty($this_mmtid)) {
    // Gather all the MM flags for the current MMTID.
    $mm_flags = mm_content_get($this_mmtid, array(MM_GET_FLAGS));
    // If the "Create Panel" flag is checked.
    if (isset($mm_flags->flags) && isset($mm_flags->flags['create_panel'])) {
      $mm_flag_create_panel = TRUE;
    }
    // Return the panelized page or FALSE if the page has not yet been panelized.
    $page = _mm_panels_is_page_panelized($this_mmtid, $mm_flag_create_panel);
  }
  else {
    return;
  }
  
  // If the page is already panelized, load the display.
  if (!empty($page) && $page != FALSE) {
  
    ctools_include('common', 'panels');
    ctools_include('plugins', 'panels');
    ctools_include('display-edit', 'panels');
    ctools_include('context');
    // Load the Panels display based on the display id.
    $display = panels_load_display($page['did']);
    $display->css_id = $page['css_id'];
    // Get the Panels render.
    $renderer = panels_get_renderer($page['pipeline'], $display);
    // Display Panels content on current MM page
    $var['page']['content']['system_main'] = array(array(
      '#markup' => '&nbsp' . panels_render_display($display, $renderer),
      '#weight' => 0,
    ));
    // If the user has MM write permissions allow them to see the Panels IPE bar.
    if (mm_content_user_can($this_mmtid, MM_PERMS_WRITE)) {
      $ipe_toolbar_buttons = &drupal_static('panels_ipe_toolbar_buttons', array());
      $ipe_display = theme('panels_ipe_toolbar', array('buttons' => $ipe_toolbar_buttons));
      $var['page']['footer']['panels_ipe'] = array(
        '#markup' => $ipe_display,
      ); 
    }      
  }
  return; 
}

/**
 * Implements hook_mm_tree_flags().
 */
function mm_panels_mm_tree_flags() {
  $mmtids = array();
  $oarg_list = array();
  $this_mmtid = 0;

  $prefix = mm_parse_args($mmtids, $oarg_list, $this_mmtid);
  
  // If a user has MM write permissions, then display the MM Panels Page flag.
  if (!empty($this_mmtid) && mm_content_user_can($this_mmtid, MM_PERMS_WRITE)) {
    return array(
      'create_panel' => array(
        '#type' => 'checkbox', '#description' => t('Creates a "panelized" MM page.')
      ),
    );
  }
  
  return array();
}

/**
 * Implements hook_mm_content_edit_submit_alter().
 */
function mm_panels_mm_content_edit_submit_alter($add, $mmtid, &$parameters) {

  $mm_flag_create_panel = FALSE;
  // Does the page contain the mm flag for create_panel?
  if (isset($parameters['flags']['create_panel'])) {
    $mm_flag_create_panel = TRUE;
  }
  
  // Do not allow a page to be panelized on creation.  Until the page is created,
  // we will not know its MMTID.
  if ($add) {
    if ($mm_flag_create_panel) {
      drupal_set_message(t("Can not panelize on page creation, please recheck flag under the new page's settings."), 'warning');
      unset($parameters['flags']['create_panel']);
    }
    return;
  }

  // If the user has MM write permissions.
  if (mm_content_user_can($mmtid, MM_PERMS_WRITE)) {
    $page = _mm_panels_is_page_panelized($mmtid, $mm_flag_create_panel);
    
    if ($mm_flag_create_panel) {
      // If the page has not yet been panelized, create a new panels display.
      if (!$page) {
        $display = panels_new_display();
        // TODO: Make the display layout configurable in the Drupal backend.
        $display->layout = 'onecol';  
        panels_save_display($display);
        db_insert('mm_panels_page')
          ->fields(array(
            'mmtid' => $mmtid,
            'did' => $display->did,
            'css_id' => '',
            'pipeline' => 'ipe',
          ))
          ->execute();
      }
    }
    /*    
    // Delete the panelized page from the database when the "Create Panel" flag
    // is unchecked
    // TODO: Make this configurable in the Drupal backend.
    else{
      $panels_deleted = db_delete('mm_panels_page')
        ->condition('mmtid', $mmtid)
        ->execute();
        
      if ($panels_deleted > 0 && $page != FALSE && !empty($page['did'])) {
        panels_delete_display($page['did']);
      }
    } */
  }
  return;
}

/**
 * Returns Panel data for requested $mmtid.
 *
 * If the MM page is panelized, return that page's Panel data.  If the page has 
 * not been panelized return false.
 *
 * @param $mmtid
 *   The mmtid of the page being requested.
 * @param $display_panels_page
 *   The Monster Menus 'create panel' flag.
 * @return
 *   Returns the data for the requested mmtid or FALSE if that mmtid is not 
 *   panelized.
 */
function _mm_panels_is_page_panelized($mmtid, $display_panels_page) {

  if ($display_panels_page) {
    $panelized_page = db_select('mm_panels_page', 'p')
      ->fields('p')
      ->condition('mmtid', $mmtid, '=')
      ->execute()
      ->fetchAssoc();
    // If panelized page is found, then return the page's Panel data
    if (isset($panelized_page) && (!empty($panelized_page) || $panelized_page)) {
      return $panelized_page;
    }
  }
  // A panelized MM page was not found.
  return FALSE;
}

/**
 * Implements hook_form_ctools_node_content_type_edit_form_alter().
 */
function mm_panels_form_ctools_node_content_type_edit_form_alter(&$form, &$form_state) {
  $nodes_to_display = array();
  
  // Remove auto-complete from form.
  unset($form['nid']);
  
  // The only build mode that is currently allowed is 'Full Content'
  
  $form['build_mode']['#default_value'] = 'full';
  // Remove the following settings if a user does not have the administer nodes
  // role.
  if (!user_access('administer nodes')) {
    unset($form['links']);
    unset($form['identifier']);
    unset($form['link_node_title']);
    unset($form['leave_node_title']);
    unset($form['override_title']);
    unset($form['override_title_text']);
    unset($form['override_title_markup']);
  }
  
  // Get the display ID of the page being edited.
  $q = explode('/', $_GET['q']);
  $did = (isset($q[4]))? intval($q[4]):0;
  $panelized_page = db_select('mm_panels_page', 'm')
    ->fields('m', array('did', 'mmtid'))
    ->condition('did', $did, '=')
    ->execute()
    ->fetchAssoc();

  // Does the user has write permissions on the MM page being edited?
  if (mm_content_user_can($panelized_page['mmtid'], MM_PERMS_WRITE)) {  
    $nodes_on_page = mm_content_get_nids_by_mmtid($panelized_page['mmtid']);
    foreach ($nodes_on_page as $node) {
      $nodes_obj = node_load($node);
      $nodes_to_display[$nodes_obj->nid] = $nodes_obj->title;
    }
  }
  
  // Only allow nodes that have been placed on the requested MM page to be 
  // added as a Panel Pane.  This allows us to preserve MM permissions.
  $form['nid'] = array(
    '#title' => t('Select content by node title'),
    '#default_value' => '',
    '#type' => 'select',
    '#options' => $nodes_to_display,
    '#weight' => -100,
  );
  
  return;
}
/**
 * Implements hook_process_panels_add_content_modal().
 */
function mm_panels_process_panels_add_content_modal(&$vars) {

  if (user_access('administer nodes')) {
    return;
  }
  
  // Remove category options from the left side of the Add Content dialog.
  unset($vars['categories_array']);

  // Only allow users to only add existing nodes to a Panel Pane.
  $vars['root_content'] ='<div class="content-type-button clearfix">
    <a href="/panels/ajax/ipe/add-pane/' . $vars['renderer']->display->did . '/' . $vars['region'] . '/node/node" class="use-ajax panels-modal-add-config" title="Add a node from your site as content.">
    <img src="https://drupal-local.lawrence.edu/sites/all/modules/ctools/plugins/content_types/node/icon_node.png" alt="" /></a>  
    <div>
      <a href="/panels/ajax/ipe/add-pane/' . $vars['renderer']->display->did . '/' . $vars['region'] . '/node/node" class="use-ajax panels-modal-add-config" title="Add a node from your site as content.">Existing node</a>
    </div>
  </div>';
  
  return;
}